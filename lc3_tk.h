#pragma once
#include <stdbool.h>
#include <stdint.h>

#include "lc3_str.h"
#include "lib/optional.h"


typedef uint16_t token_t;


// Stores the different types of tokens in LC3 assembly
typedef enum TokenType {
    TOKEN_UNKNOWN = 0x01, // Incorrect or empty token
    TOKEN_PSEUD   = 0x02, // Pseudo-operator
    TOKEN_NUM     = 0x04, // Number token
    TOKEN_KEY     = 0x08, // A word, can be instruction/label/string
    TOKEN_REG     = 0x10, // Register (R0 .. R7)
    TOKEN_STR     = 0x20  // String literal
} TokenType;


// Token type for tokens generated by tokenization
typedef struct {
    // Token string ranges buffer[start .. start + sz]
    token_t start, sz;
} Token;


#include "lc3_asm.h"


bool isTokenChar(char c);
OptInt getNumber(Token tk, String str);
Token getToken(size_t start, String str);
bool validToken(Token tk, String str);
char *tokenString(Token tk, String str);
TokenType getTokenType(Token tk, String str);
uint16_t getRegister(const char *reg, uint8_t shl);
uint16_t getCC(const char *instr, size_t len);
String generateLiteral(Token tk, String str);
size_t strlitLength(Token tk, String str);
